[{"content":"基础 什么是数据库, 数据库管理系统, 数据库系统, 数据库管理员? 数据库 : 数据库（DataBase 简称 DB）就是信息的集合或者说数据库是由数据库管理系统管理的数据的集合。 数据库管理系统 : 数据库管理系统（Database Management System 简称 DBMS）是一种操纵和管理数据库的大型软件，通常用于建立、使用和维护数据库。 数据库系统 : 数据库系统（Data Base System，简称 DBS）通常由软件、数据库和数据管理员（DBA）组成。 数据库管理员 : 数据库管理员（Database Administrator, 简称 DBA）负责全面管理和控制数据库系统。 什么是元组, 码, 候选码, 主码, 外码, 主属性, 非主属性？ 元组：元组（tuple）是关系数据库中的基本概念，关系是一张表，表中的每行（即数据库中的每条记录）就是一个元组，每列就是一个属性。 码：码就是能唯一标识实体的属性，对应表中的列。 候选码：例如：在学生实体中，“学号”是能唯一的区分学生实体的，同时又假设“姓名”、“班级”的属性组合足以区分学生实体，那么学号和姓名，班级都是候选码。 主码 : 主码也叫主键。 一个实体集中只能有一个主码，但可以有多个候选码。 外码 : 外码也叫外键。如果一个关系中的一个属性是另外一个关系中的主码则这个属性为外码。 主属性：候选码中出现过的属性称为主属性。 非主属性： 不包含在任何一个候选码中的属性称为非主属性。 什么是 ER 图？ ER 图 全称是 Entity Relationship Diagram（实体联系图），提供了表示实体类型、属性和联系的方法。\nER 图由下面 3 个要素组成：实体、属性、联系。\n下图是一个学生选课的 ER 图，每个学生可以选若干门课程，同一门课程也可以被若干人选择，所以它们之间的关系是多对多（M: N）；另外，还有其他两种实体之间的关系是：1 对 1（1:1）、1 对多（1: N）。\n数据库范式了解吗? 数据库范式有 3 种：\n1NF(第一范式)：属性不可再分。 2NF(第二范式)：在1NF 的基础之上，消除了非主属性对于码的部分函数依赖。 3NF(第三范式)：在 2NF 的基础之上，消除了非主属性对于码的传递函数依赖 。 主键和外键有什么区别? 主键(主码)：主键用于唯一标识一个元组，不能有重复，不允许为空。一个表只能有一个主键。 外键(外码)：外键用来和其他表建立联系用，外键是另一表的主键，外键是可以有重复的，可以是空值。一个表可以有多个外键。 为什么不推荐使用外键与级联？ 增加了复杂性 增加了额外工作 对分库分表不友好 实际上，外键也是有很多好处的，比如：保证了数据库数据的一致性和完整性；级联操作方便，减轻了程序代码量等。\ndrop、delete 与 truncate 区别？ 用法不同 drop（丢弃数据）: drop table 表名 ，直接将表都删除掉，在删除表的时候使用。 truncate （清空数据）: truncate table 表名 ，只删除表中的数据，再插入数据的时候自增长 id 又从 1 开始，在清空表中数据的时候使用。 delete（删除数据）: delete from 表名 where 列名=值，删除某一行的数据，如果不加 where 子句和truncate table 表名作用类似。 truncate 和不带 where子句的 delete、以及 drop 都会删除表内的数据，但是 truncate 和 delete 只删除数据不删除表的结构(定义)，执行 drop 语句，此表的结构也会删除，也就是执行drop 之后对应的表不复存在。\n属于不同的数据库语言 truncate 和 drop 属于 DDL（数据定义语言）语句，操作立即生效，原数据不放到 rollback segment 中，不能回滚，操作不触发 trigger。而 delete 语句是 DML（数据库操作语言）语句，这个操作会放到 rollback segment 中，事务提交之后才生效。\nDML 语句和 DDL 语句区别：\nDML 是数据库操作语言（Data Manipulation Language）的缩写，是指对数据库中表记录的操作，主要包括表记录的插入、更新、删除和查询，是开发人员日常使用最频繁的操作。 DDL （Data Definition Language）是数据定义语言的缩写，简单来说，就是对数据库内部的对象进行创建、删除、修改的操作语言。它和 DML 语言的最大区别是 DML 只是对表内部数据的操作，而不涉及到表的定义、结构的修改，更不会涉及到其他对象。DDL 语句更多的被数据库管理员（DBA）所使用，一般的开发人员很少使用。 另外，由于select不会对表进行破坏，所以有的地方也会把select单独区分开叫做数据库查询语言 DQL（Data Query Language）。\n执行速度不同 一般来说：drop \u0026gt; truncate \u0026gt; delete\n数据库设计通常分为哪几步? 需求分析 : 分析用户的需求，包括数据、功能和性能需求。 概念结构设计 : 主要采用 E-R 模型进行设计，包括画 E-R 图。 逻辑结构设计 : 通过将 E-R 图转换成表，实现从 E-R 模型到关系模型的转换。 物理结构设计 : 主要是为所设计的数据库选择合适的存储结构和存取路径。 数据库实施 : 包括编程、测试和试运行。 数据库的运行和维护 : 系统的运行与数据库的日常维护。 NoSQL 是什么？ NoSQL（Not Only SQL 的缩写）泛指非关系型的数据库，主要针对的是键值、文档以及图形类型数据存储。并且，NoSQL 数据库天生支持分布式，数据冗余和数据分片等特性，旨在提供可扩展的高可用高性能数据存储解决方案。\n一个常见的误解是 NoSQL 数据库或非关系型数据库不能很好地存储关系型数据。NoSQL 数据库可以存储关系型数据—它们与关系型数据库的存储方式不同。\nNoSQL 数据库代表：HBase、Cassandra、MongoDB、Redis。\nSQL 和 NoSQL 有什么区别？ SQL 数据库 NoSQL 数据库 结构化存储，具有固定行和列的表格 非结构化存储。文档：JSON 文档；键值：键值对；宽列：包含行和动态列的表；图：节点和边 Oracle、MySQL、Microsoft SQL Server、PostgreSQL 文档：MongoDB、CouchDB，键值：Redis、DynamoDB，宽列：Cassandra、 HBase，图表：Neo4j、 Amazon Neptune、Giraph 结构化查询语言（SQL） 数据访问语法可能因数据库而异 NoSQL 数据库有什么优势？ NoSQL 数据库非常适合许多现代应用程序，例如移动、Web 和游戏等应用程序，它们需要灵活、可扩展、高性能和功能强大的数据库以提供卓越的用户体验。\n灵活性： NoSQL 数据库通常提供灵活的架构，以实现更快速、更多的迭代开发。灵活的数据模型使 NoSQL 数据库成为半结构化和非结构化数据的理想之选。 可扩展性： NoSQL 数据库通常被设计为通过使用分布式硬件集群来横向扩展，而不是通过添加昂贵和强大的服务器来纵向扩展。 高性能： NoSQL 数据库针对特定的数据模型和访问模式进行了优化，这与尝试使用关系数据库完成类似功能相比可实现更高的性能。 强大的功能： NoSQL 数据库提供功能强大的 API 和数据类型，专门针对其各自的数据模型而构建。 MySQL 字符编码集中有两套 UTF-8 编码实现 MySQL 字符编码集中有两套 UTF-8 编码实现：\nutf8：utf8编码只支持1-3个字节 。 在 utf8 编码中，中文是占 3 个字节，其他数字、英文、符号占一个字节。但 emoji 符号占 4 个字节，一些较复杂的文字、繁体字也是 4 个字节。 utf8mb4：UTF-8 的完整实现，最多支持使用 4 个字节表示字符，因此，可以用来存储 emoji 符号。 为什么有两套 UTF-8 编码实现呢？ 原因如下：\n","date":"2024-04-15T06:19:12Z","permalink":"https://BigSmallBrain.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/","title":"数据库基础"},{"content":"Docker 什么是Docker Docker是一个容器化平台，它以容器的形式将您的应用程序及其所有依赖项打包在一起，以确保您的应用程序在任何环境中无缝运行。\nDocker与虚拟机有何不同 Docker不是虚拟化方法。它依赖于实际实现基于容器的虚拟化或操作系统级虚拟化的其他工具。为此，Docker最初使用LXC驱动程序，然后移动到libcontainer现在重命名为runc。\nDocker主要专注于在应用程序容器内自动部署应用程序。应用程序容器旨在打包和运行单个服务，而系统容器则设计为运行多个进程，如虚拟机。因此，Docker被视为容器化系统上的容器管理或应用程序部署工具。\n容器不需要引导操作系统内核，因此可以在不到一秒的时间内创建容器。此功能使基于容器的虚拟化比其他虚拟化方法更加独特和可取 由于基于容器的虚拟化为主机增加了很少或没有开销，因此基于容器的虚拟化具有接近本机的性能 对于基于容器的虚拟化，与其他虚拟化不同，不需要其他软件 主机上的所有容器共享主机的调度程序，从而节省了额外资源的需求 与虚拟机映像相比，容器状态（Docker或LXC映像）的大小很小，因此容器映像很容易分发 容器中的资源管理是通过cgroup实现的。Cgroups不允许容器消耗比分配给它们更多的资源。虽然主机的所有资源都在虚拟机中可见，但无法使用。这可以通过在容器和主机上同时运行top或htop来实现。所有环境的输出看起来都很相似 什么是Docker镜像 Docker镜像是Docker容器的源代码，Docker镜像用于创建容器。一般使用build命令创建镜像。\n什么是Docker容器 Docker容器包括应用程序及其所有依赖项，作为操作系统的独立进程运行。\nDocker容器有几种状态 四种状态：运行、已暂停、重新启动、已退出。\nDockerFile中最常见的指定是什么 Dockerfile保留字 备注 FROM 基础镜像，当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板。Dockerfile第一条必须是FROM MAINTAINER 镜像维护者的姓名和邮箱地址MAINTAINER kingslayer kingslayer5437@gmail.com RUN 容器构建时需要运行的命令，RUN是在docker build时运行 EXPOSE 当前容器对外暴露出的端口 WORKDIR 指定在创建容器后， 终端默认登录进来的工作目录 USER 指定该镜像以什么样的用户去执行，如果不指定，默认是root（一般不修改该配置） ENV 用来在构建镜像过程中设置环境变量 VOLUME 容器数据卷，用于数据保存和持久化工作。类似于 docker run的-v参数 ADD 将宿主机目录下（或远程文件）的文件拷贝进镜像，且会自动处理URL和解压tar压缩包 COPY 类似ADD，拷贝文件和目录到镜像中 CMD 指定容器启动后要干的事情 ENTRYPOINT 用来指定一个容器启动时要运行的命令。类似于CMD命令，但是ENTRYPOINT不会被docker run后面的命令覆盖，这些命令参数会被当做参数送给ENTRYPOINT指令指定的程序 DockerFile中的命令COPY和ADD命令有什么区别 COPY和ADD的区别时COPY的SRC只能是本地文件，其他用法一致。\nDocker的常用命令？ 命令 备注 docker pull 拉去或更新指定的镜像 docker push 将镜像推送到远程仓库 docker rm 删除容器 docker rmi 删除镜像 docker images 列出所有镜像 docker ps 列出所有容器 容器与主机之间的数据拷贝命令 docker cp src 容器:dst 命令用于穷奇与主机之间的数据拷贝\n主机到哦容器：docker cp /www 96f7f14e99ab:/www/ 容器到主机：docker cp 96f7f14e99ab:/www /tmp 启动nginx容器（随机端口映射），并挂载本地文件目录到容器html的命令 docker run -d -p --name nginxServer -v /home/nginx:/usr/share/nginx/html nginx:latest\n如何使用 Docker 技术创建与环境无关的容器系统 Docker 技术有三中主要的技术途径辅助完成此需求：\n存储卷（Volumes） 环境变量（Environment variable）注入 只读（Read-only）文件系统 有什么方法确定一个 Docker 容器运行状态 使用如下命令行命令确定一个 Docker 容器的运行状态：docker ps -a\n这将列表形式输出运行在主机上的所有 Docker 容器及其运行状态。从这个列表中很容易找到 想要的容器及其运行状态。\nDocker Image 和 Docker Layer (层) 有什么不同 Image ：一个 Docker Image 是由一系列 Docker 只读层（read-only Layer）创建出来的。\nLayer： 在 Dockerfile 配置文件中完成的一条配置指令，即表示一个 Docker 层（Layer）。 如下 Dockerfile 文件包含 4 条指令，每条指令创建一个层（Layer）。\n1 2 3 4 FROM ubuntu:15.04 COPY . /app RUN make /app CMD python /app/app.py 重点，每层只对其前一层进行一（某）些进化。\n如何停止所有正在运行的容器 使用docker kill $(sudo docker ps -q)\n如何清理批量后台停止的容器 使用docker rm $(sudo docker ps -a -q)\n如何临时退出一个正在交互的容器的终端，而不终止它 按Ctrl+p+q，如果按Ctrl+c会使容器内的应用进程终止，进而会使容器终止。\n","date":"2024-03-28T08:52:06Z","permalink":"https://BigSmallBrain.github.io/p/docker%E6%93%8D%E4%BD%9C/","title":"Docker操作"}]