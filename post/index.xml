<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Kingslayer的博客</title>
        <link>https://BigSmallBrain.github.io/post/</link>
        <description>Recent content in Posts on Kingslayer的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 15 Apr 2024 06:19:12 +0000</lastBuildDate><atom:link href="https://BigSmallBrain.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>数据库基础</title>
        <link>https://BigSmallBrain.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Mon, 15 Apr 2024 06:19:12 +0000</pubDate>
        
        <guid>https://BigSmallBrain.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;h1 id=&#34;基础&#34;&gt;基础&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;什么是数据库-数据库管理系统-数据库系统-数据库管理员&#34;&gt;什么是数据库, 数据库管理系统, 数据库系统, 数据库管理员?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据库&lt;/strong&gt; : 数据库（DataBase 简称 DB）就是信息的集合或者说数据库是由数据库管理系统管理的数据的集合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库管理系统&lt;/strong&gt; : 数据库管理系统（Database Management System 简称 DBMS）是一种操纵和管理数据库的大型软件，通常用于建立、使用和维护数据库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库系统&lt;/strong&gt; : 数据库系统（Data Base System，简称 DBS）通常由软件、数据库和数据管理员（DBA）组成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库管理员&lt;/strong&gt; : 数据库管理员（Database Administrator, 简称 DBA）负责全面管理和控制数据库系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是元组-码-候选码-主码-外码-主属性-非主属性&#34;&gt;什么是元组, 码, 候选码, 主码, 外码, 主属性, 非主属性？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;元组&lt;/strong&gt;：元组（tuple）是关系数据库中的基本概念，关系是一张表，表中的每行（即数据库中的每条记录）就是一个元组，每列就是一个属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;码&lt;/strong&gt;：码就是能唯一标识实体的属性，对应表中的列。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;候选码&lt;/strong&gt;：例如：在学生实体中，“学号”是能唯一的区分学生实体的，同时又假设“姓名”、“班级”的属性组合足以区分学生实体，那么学号和姓名，班级都是候选码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主码&lt;/strong&gt; : 主码也叫主键。 一个实体集中只能有一个主码，但可以有多个候选码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外码&lt;/strong&gt; : 外码也叫外键。如果一个关系中的一个属性是另外一个关系中的主码则这个属性为外码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主属性&lt;/strong&gt;：候选码中出现过的属性称为主属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非主属性：&lt;/strong&gt; 不包含在任何一个候选码中的属性称为非主属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是-er-图&#34;&gt;什么是 ER 图？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ER 图&lt;/strong&gt; 全称是 Entity Relationship Diagram（实体联系图），提供了表示实体类型、属性和联系的方法。&lt;/p&gt;
&lt;p&gt;ER 图由下面 3 个要素组成：实体、属性、联系。&lt;/p&gt;
&lt;p&gt;下图是一个学生选课的 ER 图，每个学生可以选若干门课程，同一门课程也可以被若干人选择，所以它们之间的关系是多对多（M: N）；另外，还有其他两种实体之间的关系是：1 对 1（1:1）、1 对多（1: N）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://BigSmallBrain.github.io/imgs/database/image1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Untitled&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据库范式了解吗&#34;&gt;数据库范式了解吗?&lt;/h2&gt;
&lt;p&gt;数据库范式有 3 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1NF(第一范式)：属性不可再分。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;2NF(第二范式)：在1NF 的基础之上，消除了非主属性对于码的部分函数依赖。&lt;/li&gt;
&lt;li&gt;3NF(第三范式)：在 2NF 的基础之上，消除了非主属性对于码的传递函数依赖 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;主键和外键有什么区别&#34;&gt;主键和外键有什么区别?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主键(主码)&lt;/strong&gt;：主键用于唯一标识一个元组，不能有重复，不允许为空。一个表只能有一个主键。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外键(外码)&lt;/strong&gt;：外键用来和其他表建立联系用，外键是另一表的主键，外键是可以有重复的，可以是空值。一个表可以有多个外键。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么不推荐使用外键与级联&#34;&gt;为什么不推荐使用外键与级联？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;增加了复杂性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增加了额外工作&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对分库分表不友好&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际上，外键也是有很多好处的，比如：保证了数据库数据的一致性和完整性；级联操作方便，减轻了程序代码量等。&lt;/p&gt;
&lt;h2 id=&#34;dropdelete-与-truncate-区别&#34;&gt;drop、delete 与 truncate 区别？&lt;/h2&gt;
&lt;h3 id=&#34;用法不同&#34;&gt;用法不同&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drop&lt;/code&gt;（丢弃数据）: &lt;code&gt;drop table 表名&lt;/code&gt; ，直接将表都删除掉，在删除表的时候使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;truncate&lt;/code&gt; （清空数据）: &lt;code&gt;truncate table 表名&lt;/code&gt; ，只删除表中的数据，再插入数据的时候自增长 id 又从 1 开始，在清空表中数据的时候使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;（删除数据）: &lt;code&gt;delete from 表名 where 列名=值&lt;/code&gt;，删除某一行的数据，如果不加 &lt;code&gt;where&lt;/code&gt; 子句和&lt;code&gt;truncate table 表名&lt;/code&gt;作用类似。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;truncate&lt;/code&gt; 和不带 &lt;code&gt;where&lt;/code&gt;子句的 &lt;code&gt;delete&lt;/code&gt;、以及 &lt;code&gt;drop&lt;/code&gt; 都会删除表内的数据，但是 &lt;strong&gt;&lt;code&gt;truncate&lt;/code&gt; 和 &lt;code&gt;delete&lt;/code&gt; 只删除数据不删除表的结构(定义)，执行 &lt;code&gt;drop&lt;/code&gt; 语句，此表的结构也会删除，也就是执行&lt;code&gt;drop&lt;/code&gt; 之后对应的表不复存在。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;属于不同的数据库语言&#34;&gt;属于不同的数据库语言&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;truncate&lt;/code&gt; 和 &lt;code&gt;drop&lt;/code&gt; 属于 DDL（数据定义语言）语句，操作立即生效，原数据不放到 rollback segment 中，不能回滚，操作不触发 trigger。而 &lt;code&gt;delete&lt;/code&gt; 语句是 DML（数据库操作语言）语句，这个操作会放到 rollback segment 中，事务提交之后才生效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DML 语句和 DDL 语句区别：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DML 是数据库操作语言（Data Manipulation Language）的缩写，是指对数据库中表记录的操作，主要包括表记录的插入、更新、删除和查询，是开发人员日常使用最频繁的操作。&lt;/li&gt;
&lt;li&gt;DDL （Data Definition Language）是数据定义语言的缩写，简单来说，就是对数据库内部的对象进行创建、删除、修改的操作语言。它和 DML 语言的最大区别是 DML 只是对表内部数据的操作，而不涉及到表的定义、结构的修改，更不会涉及到其他对象。DDL 语句更多的被数据库管理员（DBA）所使用，一般的开发人员很少使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，由于&lt;code&gt;select&lt;/code&gt;不会对表进行破坏，所以有的地方也会把&lt;code&gt;select&lt;/code&gt;单独区分开叫做数据库查询语言 DQL（Data Query Language）。&lt;/p&gt;
&lt;h3 id=&#34;执行速度不同&#34;&gt;执行速度不同&lt;/h3&gt;
&lt;p&gt;一般来说：&lt;code&gt;drop&lt;/code&gt; &amp;gt; &lt;code&gt;truncate&lt;/code&gt; &amp;gt; &lt;code&gt;delete&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据库设计通常分为哪几步&#34;&gt;数据库设计通常分为哪几步?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;需求分析&lt;/strong&gt; : 分析用户的需求，包括数据、功能和性能需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;概念结构设计&lt;/strong&gt; : 主要采用 E-R 模型进行设计，包括画 E-R 图。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;逻辑结构设计&lt;/strong&gt; : 通过将 E-R 图转换成表，实现从 E-R 模型到关系模型的转换。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物理结构设计&lt;/strong&gt; : 主要是为所设计的数据库选择合适的存储结构和存取路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库实施&lt;/strong&gt; : 包括编程、测试和试运行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库的运行和维护&lt;/strong&gt; : 系统的运行与数据库的日常维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nosql-是什么&#34;&gt;NoSQL 是什么？&lt;/h2&gt;
&lt;p&gt;NoSQL（Not Only SQL 的缩写）泛指非关系型的数据库，主要针对的是键值、文档以及图形类型数据存储。并且，NoSQL 数据库天生支持分布式，数据冗余和数据分片等特性，旨在提供可扩展的高可用高性能数据存储解决方案。&lt;/p&gt;
&lt;p&gt;一个常见的误解是 NoSQL 数据库或非关系型数据库不能很好地存储关系型数据。&lt;strong&gt;NoSQL 数据库可以存储关系型数据—它们与关系型数据库的存储方式不同。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;NoSQL 数据库代表：HBase、Cassandra、MongoDB、Redis。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://BigSmallBrain.github.io/imgs/database/image2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Untitled&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;sql-和-nosql-有什么区别&#34;&gt;SQL 和 NoSQL 有什么区别？&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SQL 数据库&lt;/th&gt;
&lt;th&gt;NoSQL 数据库&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;结构化存储，具有固定行和列的表格&lt;/td&gt;
&lt;td&gt;非结构化存储。文档：JSON 文档；键值：键值对；宽列：包含行和动态列的表；图：节点和边&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Oracle、MySQL、Microsoft SQL Server、PostgreSQL&lt;/td&gt;
&lt;td&gt;文档：MongoDB、CouchDB，键值：Redis、DynamoDB，宽列：Cassandra、 HBase，图表：Neo4j、 Amazon Neptune、Giraph&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;结构化查询语言（SQL）&lt;/td&gt;
&lt;td&gt;数据访问语法可能因数据库而异&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;nosql-数据库有什么优势&#34;&gt;NoSQL 数据库有什么优势？&lt;/h2&gt;
&lt;p&gt;NoSQL 数据库非常适合许多现代应用程序，例如移动、Web 和游戏等应用程序，它们需要灵活、可扩展、高性能和功能强大的数据库以提供卓越的用户体验。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;灵活性：&lt;/strong&gt; NoSQL 数据库通常提供灵活的架构，以实现更快速、更多的迭代开发。灵活的数据模型使 NoSQL 数据库成为半结构化和非结构化数据的理想之选。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可扩展性：&lt;/strong&gt; NoSQL 数据库通常被设计为通过使用分布式硬件集群来横向扩展，而不是通过添加昂贵和强大的服务器来纵向扩展。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高性能：&lt;/strong&gt; NoSQL 数据库针对特定的数据模型和访问模式进行了优化，这与尝试使用关系数据库完成类似功能相比可实现更高的性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;强大的功能：&lt;/strong&gt; NoSQL 数据库提供功能强大的 API 和数据类型，专门针对其各自的数据模型而构建。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql-字符编码集中有两套-utf-8-编码实现&#34;&gt;MySQL 字符编码集中有两套 UTF-8 编码实现&lt;/h2&gt;
&lt;p&gt;MySQL 字符编码集中有两套 UTF-8 编码实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;utf8&lt;/code&gt;&lt;/strong&gt;：&lt;code&gt;utf8&lt;/code&gt;编码只支持&lt;code&gt;1-3&lt;/code&gt;个字节 。 在 &lt;code&gt;utf8&lt;/code&gt; 编码中，中文是占 3 个字节，其他数字、英文、符号占一个字节。但 emoji 符号占 4 个字节，一些较复杂的文字、繁体字也是 4 个字节。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;utf8mb4&lt;/code&gt;&lt;/strong&gt;：UTF-8 的完整实现，最多支持使用 4 个字节表示字符，因此，可以用来存储 emoji 符号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;为什么有两套 UTF-8 编码实现呢？&lt;/strong&gt; 原因如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://BigSmallBrain.github.io/imgs/database/image3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Untitled&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Docker操作</title>
        <link>https://BigSmallBrain.github.io/p/docker%E6%93%8D%E4%BD%9C/</link>
        <pubDate>Thu, 28 Mar 2024 08:52:06 +0000</pubDate>
        
        <guid>https://BigSmallBrain.github.io/p/docker%E6%93%8D%E4%BD%9C/</guid>
        <description>&lt;h1 id=&#34;docker&#34;&gt;Docker&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;什么是docker&#34;&gt;&lt;strong&gt;什么是Docker&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Docker是一个容器化平台，它以容器的形式将您的应用程序及其所有依赖项打包在一起，以确保您的应用程序在任何环境中无缝运行。&lt;/p&gt;
&lt;h2 id=&#34;docker与虚拟机有何不同&#34;&gt;&lt;strong&gt;Docker与虚拟机有何不同&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Docker不是虚拟化方法。它依赖于实际实现基于容器的虚拟化或操作系统级虚拟化的其他工具。为此，Docker最初使用LXC驱动程序，然后移动到libcontainer现在重命名为runc。&lt;/p&gt;
&lt;p&gt;Docker主要专注于在应用程序容器内自动部署应用程序。应用程序容器旨在打包和运行单个服务，而系统容器则设计为运行多个进程，如虚拟机。因此，Docker被视为容器化系统上的容器管理或应用程序部署工具。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;容器不需要引导操作系统内核，因此可以在不到一秒的时间内创建容器。此功能使基于容器的虚拟化比其他虚拟化方法更加独特和可取&lt;/li&gt;
&lt;li&gt;由于基于容器的虚拟化为主机增加了很少或没有开销，因此基于容器的虚拟化具有接近本机的性能&lt;/li&gt;
&lt;li&gt;对于基于容器的虚拟化，与其他虚拟化不同，不需要其他软件&lt;/li&gt;
&lt;li&gt;主机上的所有容器共享主机的调度程序，从而节省了额外资源的需求&lt;/li&gt;
&lt;li&gt;与虚拟机映像相比，容器状态（Docker或LXC映像）的大小很小，因此容器映像很容易分发&lt;/li&gt;
&lt;li&gt;容器中的资源管理是通过cgroup实现的。Cgroups不允许容器消耗比分配给它们更多的资源。虽然主机的所有资源都在虚拟机中可见，但无法使用。这可以通过在容器和主机上同时运行top或htop来实现。所有环境的输出看起来都很相似&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;什么是docker镜像&#34;&gt;&lt;strong&gt;什么是Docker镜像&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Docker镜像是Docker容器的源代码，Docker镜像用于创建容器。一般使用build命令创建镜像。&lt;/p&gt;
&lt;h2 id=&#34;什么是docker容器&#34;&gt;&lt;strong&gt;什么是Docker容器&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Docker容器包括应用程序及其所有依赖项，作为操作系统的独立进程运行。&lt;/p&gt;
&lt;h2 id=&#34;docker容器有几种状态&#34;&gt;&lt;strong&gt;Docker容器有几种状态&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;四种状态：运行、已暂停、重新启动、已退出。&lt;/p&gt;
&lt;h2 id=&#34;dockerfile中最常见的指定是什么&#34;&gt;&lt;strong&gt;DockerFile中最常见的指定是什么&lt;/strong&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Dockerfile保留字&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FROM&lt;/td&gt;
&lt;td&gt;基础镜像，当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板。Dockerfile第一条必须是FROM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MAINTAINER&lt;/td&gt;
&lt;td&gt;镜像维护者的姓名和邮箱地址MAINTAINER kingslayer &lt;a class=&#34;link&#34; href=&#34;mailto:kingslayer5437@gmail.com&#34; &gt;kingslayer5437@gmail.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RUN&lt;/td&gt;
&lt;td&gt;容器构建时需要运行的命令，RUN是在docker build时运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EXPOSE&lt;/td&gt;
&lt;td&gt;当前容器对外暴露出的端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WORKDIR&lt;/td&gt;
&lt;td&gt;指定在创建容器后， 终端默认登录进来的工作目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;USER&lt;/td&gt;
&lt;td&gt;指定该镜像以什么样的用户去执行，如果不指定，默认是root（一般不修改该配置）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ENV&lt;/td&gt;
&lt;td&gt;用来在构建镜像过程中设置环境变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VOLUME&lt;/td&gt;
&lt;td&gt;容器数据卷，用于数据保存和持久化工作。类似于 docker run的-v参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ADD&lt;/td&gt;
&lt;td&gt;将宿主机目录下（或远程文件）的文件拷贝进镜像，且会自动处理URL和解压tar压缩包&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;COPY&lt;/td&gt;
&lt;td&gt;类似ADD，拷贝文件和目录到镜像中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CMD&lt;/td&gt;
&lt;td&gt;指定容器启动后要干的事情&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ENTRYPOINT&lt;/td&gt;
&lt;td&gt;用来指定一个容器启动时要运行的命令。类似于CMD命令，但是ENTRYPOINT不会被docker run后面的命令覆盖，这些命令参数会被当做参数送给ENTRYPOINT指令指定的程序&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;dockerfile中的命令copy和add命令有什么区别&#34;&gt;&lt;strong&gt;DockerFile中的命令COPY和ADD命令有什么区别&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;COPY和ADD的区别时COPY的SRC只能是本地文件，其他用法一致。&lt;/p&gt;
&lt;h2 id=&#34;docker的常用命令&#34;&gt;&lt;strong&gt;Docker的常用命令？&lt;/strong&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;docker pull&lt;/td&gt;
&lt;td&gt;拉去或更新指定的镜像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker push&lt;/td&gt;
&lt;td&gt;将镜像推送到远程仓库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker rm&lt;/td&gt;
&lt;td&gt;删除容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker rmi&lt;/td&gt;
&lt;td&gt;删除镜像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker images&lt;/td&gt;
&lt;td&gt;列出所有镜像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker ps&lt;/td&gt;
&lt;td&gt;列出所有容器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;容器与主机之间的数据拷贝命令&#34;&gt;&lt;strong&gt;容器与主机之间的数据拷贝命令&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker cp src 容器:dst&lt;/code&gt;   命令用于穷奇与主机之间的数据拷贝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机到哦容器：&lt;code&gt;docker cp /www 96f7f14e99ab:/www/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;容器到主机：&lt;code&gt;docker cp 96f7f14e99ab:/www /tmp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;启动nginx容器随机端口映射并挂载本地文件目录到容器html的命令&#34;&gt;&lt;strong&gt;启动nginx容器（随机端口映射），并挂载本地文件目录到容器html的命令&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run -d -p --name nginxServer -v /home/nginx:/usr/share/nginx/html nginx:latest&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何使用-docker-技术创建与环境无关的容器系统&#34;&gt;&lt;strong&gt;如何使用 Docker 技术创建与环境无关的容器系统&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Docker 技术有三中主要的技术途径辅助完成此需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储卷（Volumes）&lt;/li&gt;
&lt;li&gt;环境变量（Environment variable）注入&lt;/li&gt;
&lt;li&gt;只读（Read-only）文件系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;有什么方法确定一个-docker-容器运行状态&#34;&gt;&lt;strong&gt;有什么方法确定一个 Docker 容器运行状态&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;使用如下命令行命令确定一个 Docker 容器的运行状态：&lt;code&gt;docker ps -a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这将列表形式输出运行在主机上的所有 Docker 容器及其运行状态。从这个列表中很容易找到 想要的容器及其运行状态。&lt;/p&gt;
&lt;h2 id=&#34;docker-image-和-docker-layer-层-有什么不同&#34;&gt;&lt;strong&gt;Docker Image 和 Docker Layer (层) 有什么不同&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Image ：一个 Docker Image 是由一系列 Docker 只读层（read-only Layer）创建出来的。&lt;/p&gt;
&lt;p&gt;Layer： 在 Dockerfile 配置文件中完成的一条配置指令，即表示一个 Docker 层（Layer）。 如下 Dockerfile 文件包含 4 条指令，每条指令创建一个层（Layer）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; ubuntu:15.04 &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; . /app &lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; make /app &lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt; python /app/app.py&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;重点，每层只对其前一层进行一（某）些进化。&lt;/p&gt;
&lt;h2 id=&#34;如何停止所有正在运行的容器&#34;&gt;&lt;strong&gt;如何停止所有正在运行的容器&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;docker kill $(sudo docker ps -q)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何清理批量后台停止的容器&#34;&gt;&lt;strong&gt;如何清理批量后台停止的容器&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;docker rm $(sudo docker ps -a -q)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何临时退出一个正在交互的容器的终端而不终止它&#34;&gt;&lt;strong&gt;如何临时退出一个正在交互的容器的终端，而不终止它&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;按&lt;code&gt;Ctrl+p+q&lt;/code&gt;，如果按&lt;code&gt;Ctrl+c&lt;/code&gt;会使容器内的应用进程终止，进而会使容器终止。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
