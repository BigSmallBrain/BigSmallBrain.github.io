<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Linux on Kingslayer的博客</title>
        <link>https://bigsmallbrain.github.io/tags/linux/</link>
        <description>Recent content in Linux on Kingslayer的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 28 Mar 2024 08:52:06 +0000</lastBuildDate><atom:link href="https://bigsmallbrain.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Docker操作</title>
        <link>https://bigsmallbrain.github.io/p/docker%E6%93%8D%E4%BD%9C/</link>
        <pubDate>Thu, 28 Mar 2024 08:52:06 +0000</pubDate>
        
        <guid>https://bigsmallbrain.github.io/p/docker%E6%93%8D%E4%BD%9C/</guid>
        <description>&lt;h1 id=&#34;docker&#34;&gt;Docker&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;什么是docker&#34;&gt;&lt;strong&gt;什么是Docker&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Docker是一个容器化平台&lt;/strong&gt;，它以容器的形式将您的应用程序及其所有依赖项打包在一起，以确保您的应用程序在任何环境中无缝运行。&lt;/p&gt;
&lt;h2 id=&#34;docker与虚拟机有何不同&#34;&gt;&lt;strong&gt;Docker与虚拟机有何不同&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;**Docker不是虚拟化方法。它依赖于实际实现基于容器的虚拟化或操作系统级虚拟化的其他工具。**为此，Docker最初使用LXC驱动程序，然后移动到libcontainer现在重命名为runc。&lt;/p&gt;
&lt;p&gt;**Docker主要专注于在应用程序容器内自动部署应用程序。应用程序容器旨在打包和运行单个服务，而系统容器则设计为运行多个进程，如虚拟机。**因此，Docker被视为容器化系统上的容器管理或应用程序部署工具。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;容器不需要引导操作系统内核，因此可以在不到一秒的时间内创建容器。此功能使基于容器的虚拟化比其他虚拟化方法更加独特和可取&lt;/li&gt;
&lt;li&gt;由于基于容器的虚拟化为主机增加了很少或没有开销，因此基于容器的虚拟化具有接近本机的性能&lt;/li&gt;
&lt;li&gt;对于基于容器的虚拟化，与其他虚拟化不同，不需要其他软件&lt;/li&gt;
&lt;li&gt;主机上的所有容器共享主机的调度程序，从而节省了额外资源的需求&lt;/li&gt;
&lt;li&gt;与虚拟机映像相比，容器状态（Docker或LXC映像）的大小很小，因此容器映像很容易分发&lt;/li&gt;
&lt;li&gt;容器中的资源管理是通过cgroup实现的。Cgroups不允许容器消耗比分配给它们更多的资源。虽然主机的所有资源都在虚拟机中可见，但无法使用。这可以通过在容器和主机上同时运行top或htop来实现。所有环境的输出看起来都很相似。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;什么是docker镜像&#34;&gt;&lt;strong&gt;什么是Docker镜像&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Docker镜像是Docker容器的源代码，Docker镜像用于创建容器。一般使用build命令创建镜像。&lt;/p&gt;
&lt;h2 id=&#34;什么是docker容器&#34;&gt;&lt;strong&gt;什么是Docker容器&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Docker容器包括应用程序及其所有依赖项，作为操作系统的独立进程运行。&lt;/p&gt;
&lt;h2 id=&#34;docker容器有几种状态&#34;&gt;&lt;strong&gt;Docker容器有几种状态&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;四种状态：运行、已暂停、重新启动、已退出。&lt;/p&gt;
&lt;h2 id=&#34;dockerfile中最常见的指定是什么&#34;&gt;&lt;strong&gt;DockerFile中最常见的指定是什么&lt;/strong&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Dockerfile保留字&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FROM&lt;/td&gt;
&lt;td&gt;基础镜像，当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板。Dockerfile第一条必须是FROM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MAINTAINER&lt;/td&gt;
&lt;td&gt;镜像维护者的姓名和邮箱地址MAINTAINER kingslayer &lt;a class=&#34;link&#34; href=&#34;mailto:kingslayer5437@gmail.com&#34; &gt;kingslayer5437@gmail.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RUN&lt;/td&gt;
&lt;td&gt;容器构建时需要运行的命令，RUN是在docker build时运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EXPOSE&lt;/td&gt;
&lt;td&gt;当前容器对外暴露出的端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WORKDIR&lt;/td&gt;
&lt;td&gt;指定在创建容器后， 终端默认登录进来的工作目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;USER&lt;/td&gt;
&lt;td&gt;指定该镜像以什么样的用户去执行，如果不指定，默认是root（一般不修改该配置）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ENV&lt;/td&gt;
&lt;td&gt;用来在构建镜像过程中设置环境变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VOLUME&lt;/td&gt;
&lt;td&gt;容器数据卷，用于数据保存和持久化工作。类似于 docker run的-v参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ADD&lt;/td&gt;
&lt;td&gt;将宿主机目录下（或远程文件）的文件拷贝进镜像，且会自动处理URL和解压tar压缩包&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;COPY&lt;/td&gt;
&lt;td&gt;类似ADD，拷贝文件和目录到镜像中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CMD&lt;/td&gt;
&lt;td&gt;指定容器启动后要干的事情&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ENTRYPOINT&lt;/td&gt;
&lt;td&gt;用来指定一个容器启动时要运行的命令。类似于CMD命令，但是ENTRYPOINT不会被docker run后面的命令覆盖，这些命令参数会被当做参数送给ENTRYPOINT指令指定的程序&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;dockerfile中的命令copy和add命令有什么区别&#34;&gt;&lt;strong&gt;DockerFile中的命令COPY和ADD命令有什么区别&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;COPY和ADD的区别时COPY的SRC只能是本地文件，其他用法一致。&lt;/p&gt;
&lt;h2 id=&#34;docker的常用命令&#34;&gt;&lt;strong&gt;Docker的常用命令？&lt;/strong&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;docker pull&lt;/td&gt;
&lt;td&gt;拉去或更新指定的镜像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker push&lt;/td&gt;
&lt;td&gt;将镜像推送到远程仓库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker rm&lt;/td&gt;
&lt;td&gt;删除容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker rmi&lt;/td&gt;
&lt;td&gt;删除镜像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker images&lt;/td&gt;
&lt;td&gt;列出所有镜像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker ps&lt;/td&gt;
&lt;td&gt;列出所有容器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;容器与主机之间的数据拷贝命令&#34;&gt;&lt;strong&gt;容器与主机之间的数据拷贝命令&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker cp src 容器:dst&lt;/code&gt;   命令用于穷奇与主机之间的数据拷贝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机到哦容器：&lt;code&gt;docker cp /www 96f7f14e99ab:/www/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;容器到主机：&lt;code&gt;docker cp 96f7f14e99ab:/www /tmp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;启动nginx容器随机端口映射并挂载本地文件目录到容器html的命令&#34;&gt;&lt;strong&gt;启动nginx容器（随机端口映射），并挂载本地文件目录到容器html的命令&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run -d -p --name nginxServer -v /home/nginx:/usr/share/nginx/html nginx:latest&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何使用-docker-技术创建与环境无关的容器系统&#34;&gt;&lt;strong&gt;如何使用 Docker 技术创建与环境无关的容器系统&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Docker 技术有三中主要的技术途径辅助完成此需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储卷（Volumes）&lt;/li&gt;
&lt;li&gt;环境变量（Environment variable）注入&lt;/li&gt;
&lt;li&gt;只读（Read-only）文件系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;有什么方法确定一个-docker-容器运行状态&#34;&gt;&lt;strong&gt;有什么方法确定一个 Docker 容器运行状态&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;使用如下命令行命令确定一个 Docker 容器的运行状态：&lt;code&gt;docker ps -a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这将列表形式输出运行在主机上的所有 Docker 容器及其运行状态。从这个列表中很容易找到 想要的容器及其运行状态。&lt;/p&gt;
&lt;h2 id=&#34;docker-image-和-docker-layer-层-有什么不同&#34;&gt;&lt;strong&gt;Docker Image 和 Docker Layer (层) 有什么不同&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Image ：一个 Docker Image 是由一系列 Docker 只读层（read-only Layer）创建出来的。&lt;/p&gt;
&lt;p&gt;Layer： 在 Dockerfile 配置文件中完成的一条配置指令，即表示一个 Docker 层（Layer）。 如下 Dockerfile 文件包含 4 条指令，每条指令创建一个层（Layer）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; ubuntu:15.04 &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; . /app &lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; make /app &lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt; python /app/app.py&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;重点，每层只对其前一层进行一（某）些进化。&lt;/p&gt;
&lt;h2 id=&#34;如何停止所有正在运行的容器&#34;&gt;&lt;strong&gt;如何停止所有正在运行的容器&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;docker kill $(sudo docker ps -q)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何清理批量后台停止的容器&#34;&gt;&lt;strong&gt;如何清理批量后台停止的容器&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;docker rm $(sudo docker ps -a -q)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;如何临时退出一个正在交互的容器的终端而不终止它&#34;&gt;&lt;strong&gt;如何临时退出一个正在交互的容器的终端，而不终止它&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;按&lt;code&gt;Ctrl+p+q&lt;/code&gt;，如果按&lt;code&gt;Ctrl+c&lt;/code&gt;会使容器内的应用进程终止，进而会使容器终止。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
